<?xml version="1.0" encoding="UTF-8"?>
<project name="android-ioc-sample" default="help">

	<property file="local.properties" />
    <property file="ant.properties" />
    <property file="emma.properties" />
    <loadproperties srcFile="project.properties" />
	
	<target name="copy-library-src">
		<!-- Copy source from library project -->
		<antcall target="clean-library-src"/>
		<mkdir dir="${source.dir}"/>
		<copy todir="${source.dir}">
			<fileset dir="../core/src"/>
			<fileset dir="src"/>
		</copy>	
	</target>
	
	<target name="clean-library-src">
		<!-- Don't use variable in case we accidentally delete src! -->
		<delete dir="src_ext"/>
	</target>
	
    <fail message="source.dir is missing. Make sure specify a source.dir in ant.properties or local.properties"
            unless="source.dir"/>	

    <fail message="sdk.dir is missing. Make sure to generate local.properties using 'android update project'"
            unless="sdk.dir"/>

	<!-- 
		################################################################################################
		OVERRIDE DEFAULT COMPILE TARGET FROM ANDROID TO REMOVE COVERAGE CREATION
		################################################################################################
	-->	

    <target name="-compile" depends="-build-setup, -pre-build, -code-gen, -pre-compile">
       
    	<echo></echo>
    	<echo>##################################################################################################</echo>
    	<echo>######################################## BUILDING SAMPLE #########################################</echo>
    	<echo>##################################################################################################</echo>
    	<echo></echo>    	
    	
    	<!-- Overwrite jar libs ref -->
    	<path id="jar.libs.ref"/>
    	
		<do-only-if-manifest-hasCode elseText="hasCode = false. Skipping...">

        	<condition property="extensible.classpath"
                    value="${tested.project.absolute.dir}/bin/classes"
                    else=".">
                <isset property="tested.project.absolute.dir" />
            </condition>
			
            <condition property="extensible.libs.classpath"
                    value="${tested.project.absolute.dir}/${jar.libs.dir}"
                    else="${jar.libs.dir}">
                <isset property="tested.project.absolute.dir" />
            </condition>
			
			<echo>Compiling sample project from src ${source.absolute.dir} to ${out.classes.absolute.dir}</echo>
			
			
            <javac encoding="${java.encoding}"
                    source="${java.source}" 
            		target="${java.target}"
                    debug="true" 
            		extdirs=""
                    destdir="${out.classes.absolute.dir}"
                    bootclasspathref="android.target.classpath"
                    verbose="${verbose}"
                    classpath="${extensible.classpath}"
                    classpathref="jar.libs.ref">
            	
                <src path="${source.absolute.dir}" />
                <src path="${gen.absolute.dir}" />
            	
            	 <classpath>
                    <fileset dir="${extensible.libs.classpath}" includes="*.jar" />
                </classpath>
            </javac>	
			
            <!-- if the project is instrumented, intrument the classes -->
            <if condition="${build.is.instrumented}">
                <then>
                    <echo>Instrumenting classes from ${out.absolute.dir}/classes...</echo>
                    <echo>[OVERRIDE] Instrumenting classes from ${out.absolute.dir}/classes to ${out.absolute.dir}/classes</echo>
                	<echo>EMMA will create meta data file in ${emma.report.dir}/coverage.em</echo>
                	
                    <!-- It only instruments class files, not any external libs -->
                    <emma enabled="true">
                        <instr 
							verbosity="${verbosity}"
							mode="overwrite"
							instrpath="${out.absolute.dir}/classes"
							outdir="${out.absolute.dir}/classes"
							metadatafile="${emma.report.dir}/coverage.em"
							filter="${emma.excluded}">
                        </instr>
                    </emma>
                </then>
            </if>			
        </do-only-if-manifest-hasCode>
    	
    </target>	
	
    <!-- Import the actual build file.

         To customize existing targets, there are two options:
         - Customize only one target:
             - copy/paste the target into this file, *before* the
               <import> task.
             - customize it to your needs.
         - Customize the whole content of build.xml
             - copy/paste the content of the rules files (minus the top node)
               into this file, replacing the <import> task.
             - customize to your needs.

         ***********************
         ****** IMPORTANT ******
         ***********************
         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,
         in order to avoid having your file be overridden by tools such as "android update project"
    -->
    <!-- version-tag: custom -->
	
	<import file="../core/ant/android_r15_build.xml" />
	<!-- <import file="${sdk.dir}/tools/ant/build.xml" /> -->

</project>